/*
 * $Id$
 */

#ifndef KR_COMMON_H
#define KR_COMMON_H

#ifndef HAVE_LIBSQLITE3
	#undef HAVE_LIBSQLITE3
#endif
#ifndef HAVE_LIBSQLITE
	#undef HAVE_LIBSQLITE
#endif
#ifndef HAVE_PTHREAD_H
	#undef HAVE_PTHREAD_H
#endif
#ifndef HAVE_STDBOOL_H
	#undef HAVE_STDBOOL_H
#endif

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sys/types.h>
#include <sys/stat.h>
#include <unistd.h>
#include <time.h>

#ifdef HAVE_PTHREAD_H
	#include <pthread.h>
#endif

#if defined(HAVE_LIBSQLITE3)
	#include <sqlite3.h>
#else
	#include <sqlite.h>
#endif

#ifdef HAVE_STDBOOL_H
	#include <stdbool.h>
#else
	#ifndef _STDBOOL_H
		#define _STDBOOL_H
		#ifndef __cplusplus

			#define bool    _Bool
			#define true    1
			#define false   0

		#else /* __cplusplus */

			/* Supporting <stdbool.h> in C++ is a GCC extension.  */
			#define _Bool   bool
			#define bool    bool
			#define false   false
			#define true    true

		#endif /* __cplusplus */

		/* Signal that all the definitions are present.  */
		#define __bool_true_false_are_defined   1
	#endif
#endif

#define set_true(x) (x = true)
#define set_false(x) (x = false)
#define switch_bool(x) ((x == true) ? false : true)

#ifdef __cplusplus
extern "C" {
#endif

typedef struct db_argument {
	char 			err[1024];
	char			database[256];
#ifdef HAVE_PTHREAD_H
	pthread_mutex_t	mutex;
#endif
#if defined(HAVE_LIBSQLITE3)
	sqlite3	*		c;		// db resource
	sqlite3_stmt *	vm;		// sqlite vm
#else
	sqlite *		c;		// db resource
	sqlite_vm *		vm;		// sqlite vm
#endif
	const char **	rowdata;
	const char **	colname;
	char *			table;
	char *			old_table;
#if defined(HAVE_LIBSQLITE)
	char *			dberr;	// vm error message
#endif
	int				rows;	// vm rows
	int				cols;	// number of columns

	time_t          db_time_stamp;			// database mtime stamp
	time_t          db_stamp_checked;		// record db mtime check time
	time_t          db_time_stamp_interval; // database mtime stamp check interval.
											// If value is 0, don't check.

	short			verbose;
#ifdef HAVE_PTHREAD_H
	short			threadsafe;
#endif
	short			r;		// execute result code
	short			final;  // force finalize
} KR_API;

typedef struct raw_netinfos {
	char			err[1024];
	char			ip[16];
	char **			dummy;
	char *			dummydata;
	ulong			start;
	ulong			end;
	short			verbose;
	short			size;
} RAW_KRNET_API;

typedef RAW_KRNET_API KRNET_API_EX;

typedef struct netinfos {
	char			err[1024];
	char			ip[256];
	char			icode[64];
	char			iname[64];
	char			cname[64];
	char			ccode[4];
	ulong			netmask;
	ulong			start;
	ulong			end;
	short			verbose;
} KRNET_API;

typedef struct range {
	ulong			start;
	ulong			end;
} KRNET_RANGE;

typedef struct req_range {
	char			err[1024];
	char			data[1024];
	short			code;
	short			verbose;
	int				count;
	KRNET_RANGE		* ranges;
} KRNET_REQ_RANGE;

struct cinfo {
	ulong	ip;
	ulong	mask;
	ulong	network;
	ulong	bcast;
};

#ifdef __cplusplus
};
#endif

#endif

/*
 * Local variables:
 * tab-width: 4
 * c-basic-offset: 4
 * End:
 * vim600: noet sw=4 ts=4 fdm=marker
 * vim<600: noet sw=4 ts=4
 */
