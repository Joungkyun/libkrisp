.TH KR_OPEN 3 "22 May 2010"
.UC 4
.SH 이름
kr_open - libkrisp 의 database 를 연다.
.SH 사용법
.BI "#include <krips.h>"
.br
.BI "typedef struct " db_argument " {"
.br
.BI "#if defined(HAVE_LIBSQLITE3)"
.br
.BI "    sqlite3 *       " c ";      // db resource"
.br
.BI "    sqlite3_stmt *  " vm ";     // sqlite vm"
.br
.BI "#else"
.br
.BI "    sqlite *        " c ";      // db resource"
.br
.BI "    sqlite_vm *     " vm ";     // sqlite vm"
.br
.BI "#endif"
.br
.BI "    short           " r ";      // execute result code"
.br
.BI "    short           " final ";  // force finalize"
.br
.BI "    int             " rows ";   // vm rows"
.br
.BI "    int             " cols ";   // number of columns"
.br
.BI "#if defined(HAVE_LIBSQLITE)"
.br
.BI "    char *          " dberr ";  // vm error message"
.br
.BI "#endif"
.br
.BI "    char            " err[1024] ";"
.br
.BI "    char *          " table ";"
.br
.BI "    char *          " old_table ";"
.br
.BI "    const char **   " rowdata ";"
.br
.BI "    const char **   " colname ";"
.br
.BI "} " KR_API ";"
.br
.BI "int kr_open (KR_API **" db ", char *" path ", char *" err ")"
.SH 설명
.BI kr_open
API는 libkrisp 를 링크하여 databse 파일을 열기 위해 사용한다.
.BI kr_open
API의 argument 는 database 연결에 사용되는
.BI KR_API
structure 와 database 파일의 경로를 지정을 한다. 세번째 인자는
.BI kr_open
API가 실행에 실패할 경우, 에러 메시지를 담게 된다.
.PP
.BI KR_API
structure 는 krispcommon.h 에 정의가 되어 있으며, kr_open 을 호출하기
전에 다음과 같이 정의 되어 있어야 한다.
.PP
.BI "KR_API *" db ";"
.br
.BI "char *" err[1024] ";"
.br
.BI "if ( kr_open (&" db ", NULL, " err ") ) {"
.br
.BI "    .."
.br
.BI "}"
.PP
.SH 반환값
성공시에 0 을 반환하며, 실패시에 1 또는 2를 반환한다. 2를 반환한 경우에는
memory allocation에 실패한 경우이기 때문에 예제와 같이 예외 처리를 해 주어야
하며, 1을 반환했을 경우에는 memory allocation이 된 상태 이기 때문에 kr_close
API로 메모리 해제를 해 주어야 한다.
.SH 예제
.nf
#include <krisp.h>

int main (void) {
    KR_API * db;
    KRNET_API isp;
    char * addr = "kns.kornet.net";
    int r;
    char * database = NULL;
    char err[1024];

    if ( (r = kr_open (&db, database, err)) > 0 ) {
        fprintf (stderr, "ERROR Connect: %s\\n", err);
        kr_close (db);
        return 1;
    }

    isp.verbose = 0;
    safecpy_256 (isp.ip, addr);
    if ( kr_search (&isp, db) ) {
        printf ("ERROR: %s\\n", db->err);
        kr_close (db);
        return 1;
    }

    kr_close (db);

    /*
     * kr_long2ip is returned in a statically allocated buffer, which
     * subsequent calls will overwrite.
     */
    printf ("%-15s %-15s %-20s", ip, isp.ip, isp.icode);
    printf ("%-15s ", kr_long2ip (isp.start));
    printf ("%-15s %s", kr_long2ip (isp.end), isp.iname);

    return 0;
}
.fi
.SH 저자
김정균
.SH 버그 리포트
<http://oops.org> 의 QnA 게시판을 이용한다.
.SH 저작권
Copyright (c) 2010 JoungKyun.Kim <http://oops.org>

이 API는
.BI LGPL
을 따르며, 사용시의 어떠한 문제에 대하여 보증하지 않는다.
.SH "참고"
kr_close(3), kr_search(3), kr_long2ip(3)
